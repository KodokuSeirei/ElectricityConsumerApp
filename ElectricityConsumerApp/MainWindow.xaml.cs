using ElectricityConsumerApp.Model;
using ElectricityConsumerApp.Service;
using System;
using System.Data;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;

namespace ElectricityConsumerApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        #region Properties


        DataSet ConsumersDataSet { get; set; } = new DataSet();

        TableTypeEnum TableType { get; set; } = TableTypeEnum.Consumer;

        public DataTable Consumers
        {
            get
            {
                if (ConsumersDataSet.Tables.Count > 0)
                    return ConsumersDataSet.Tables[0];
                else
                    return new DataTable();
            }
            set { }
        }

        public string LastName
        {
            get
            {
                return searchByLastNameTextBox.Text;
            }
        }
        public DataTable ElectricMeters { get; set; }
        public DataTable TestimonyHistory { get; set; }


        #endregion


        public MainWindow()
        {
            InitializeComponent();
            try
            {
                ConsumersDataSet = ConsumerService.GetAllConsumersDataSet();
                consumerGrid.DataContext = Consumers;
                consumerGrid.Visibility = Visibility.Hidden;
                consumerGrid.AutoGeneratedColumns += consumerGrid_AutoGeneratedColumns;
                consumerGrid.LoadingRow += consumerGrid_LoadingRow;
            }
            catch (Exception ex)
            {
                MessageBox.Show("При загрузке данных произошла ошибка");
            }
        }


        #region Methods


        //Заполение имён для колонок в зависимости от типа активной таблицы
        private void SetNamesForColumns()
        {
            #region TableTypeEnum.Consumer

            if (TableType == TableTypeEnum.Consumer)
            {
                consumerGrid.Columns[1].Header = "Фамилия";
                consumerGrid.Columns[2].Header = "Имя";
                consumerGrid.Columns[3].Header = "Отчество";
                consumerGrid.Columns[4].Header = "Номера счётчиков";
                consumerGrid.Columns[5].Header = "Адрес";
                consumerGrid.Columns[0].Visibility = Visibility.Hidden;
            }

            #endregion


            #region TableTypeEnum.ElectricMeter

            if (TableType == TableTypeEnum.ElectricMeter)
            {
                consumerGrid.Columns[0].Header = "Номер";
                consumerGrid.Columns[1].Header = "Тип";
                consumerGrid.Columns[2].Header = "Дата приёмки";
                consumerGrid.Columns[3].Header = "Срок госповерки (лет)";
                consumerGrid.Columns[0].Visibility = Visibility.Visible;
            }

            #endregion


            #region TableTypeEnum.TestimonyHistory

            if (TableType == TableTypeEnum.TestimonyHistory)
            {
                consumerGrid.Columns[1].Header = "Номер счётчика";
                consumerGrid.Columns[2].Header = "Значение";
                consumerGrid.Columns[3].Header = "Дата";
            }

            #endregion
        }

        //Обновление отображаемых потребителей
        public void ConsumersReload()
        {
            TableType = TableTypeEnum.Consumer;
            ConsumersDataSet = ConsumerService.GetAllConsumersDataSet();
            consumerGrid.DataContext = Consumers;
        }

        public void ElectricMetersReload()
        {
            TableType = TableTypeEnum.ElectricMeter;
            ElectricMeters = ElectricMeterService.GetAllElectricMetersTable();
            consumerGrid.DataContext = ElectricMeters;
            (consumerGrid.Columns[2] as DataGridTextColumn).Binding.StringFormat = "dd.MM.yyyy";
        }


        //Открытие окна редактирования потребителя
        void EditConsumer(object sender, RoutedEventArgs e)
        {
            int consumerID;

            if (!Int32.TryParse((sender as Button).GetValue(DataContextProperty).ToString(), out consumerID) || consumerID == 0)
            {
                MessageBox.Show("Не удалось сопоставить индификатор строки с существующим потребителем. Попробуйте обновить список потребителей." + (sender as Button).GetValue(DataContextProperty).ToString());
                return;
            }

            AddEditConsumerWindow addConsumerWindow = new AddEditConsumerWindow()
            {
                ConsumerID = consumerID
            };

            addConsumerWindow.Owner = this;
            addConsumerWindow.Title = "Редактирование потребителя";
            addConsumerWindow.addEditConsumerButton.Content = "Применить";
            addConsumerWindow.ShowDialog();

            ConsumersReload();
        }

        //Удаление потребителя
        void DeleteConsumer(object sender, RoutedEventArgs e)
        {
            int consumerID;

            if (!Int32.TryParse((sender as Button).GetValue(DataContextProperty).ToString(), out consumerID) || consumerID == 0)
            {
                MessageBox.Show("Не удалось сопоставить индификатор строки с существующим потребителем. Попробуйте обновить список потребителей." + (sender as Button).GetValue(DataContextProperty).ToString());
                return;
            }

            MessageBoxResult messageBoxResult = MessageBox.Show("Вы уверены что хотите удалить данного потребителя?", "Подтверждение удаления", MessageBoxButton.YesNo);
            if (messageBoxResult == MessageBoxResult.Yes)
                ConsumerService.DeleteConsumer(consumerID);

            ConsumersReload();
        }

        //Открытие окна редактирования электросчётчика
        void EditElectricMeter(object sender, RoutedEventArgs e)
        {
            int electricMeterNumber;

            if (!Int32.TryParse((sender as Button).GetValue(DataContextProperty).ToString(), out electricMeterNumber) || electricMeterNumber == 0)
            {
                MessageBox.Show("Не удалось сопоставить индификатор строки с существующим электросчётчиком. Попробуйте обновить список электросчётчиков." + (sender as Button).GetValue(DataContextProperty).ToString());
                return;
            }

            AddEditElectricMeterWindow addEditElectricMeterWindow = new AddEditElectricMeterWindow()
            {
                ElectricMeterNumber = electricMeterNumber
            };

            addEditElectricMeterWindow.Owner = this;
            addEditElectricMeterWindow.Title = "Редактирование счётчика";
            addEditElectricMeterWindow.addEditElectricMeterButton.Content = "Применить";
            addEditElectricMeterWindow.numberTextBox.IsReadOnly = true;
            addEditElectricMeterWindow.ShowDialog();

            ElectricMetersReload();
        }

        //Удаление электросчётчика
        void DeleteElectricMeter(object sender, RoutedEventArgs e)
        {
            int electricMeterNumber;

            if (!Int32.TryParse((sender as Button).GetValue(DataContextProperty).ToString(), out electricMeterNumber) || electricMeterNumber == 0)
            {
                MessageBox.Show("Не удалось сопоставить индификатор строки с существующим электросчётчиком. Попробуйте обновить список электросчётчиков." + (sender as Button).GetValue(DataContextProperty).ToString());
                return;
            }

            MessageBoxResult messageBoxResult = MessageBox.Show("Вы уверены что хотите удалить данный электросчётчик?", "Подтверждение удаления", MessageBoxButton.YesNo);
            if (messageBoxResult == MessageBoxResult.Yes)
                ElectricMeterService.DeleteElectricMeter(electricMeterNumber);

            ElectricMetersReload();
        }

        //Отображение показаний электросчётчика
        void ShowTestimonyHistoryForElectricMeter(object sender, RoutedEventArgs e)
        {
            int electricMeterNumber;

            if (!Int32.TryParse((sender as Button).GetValue(DataContextProperty).ToString(), out electricMeterNumber) || electricMeterNumber == 0)
            {
                MessageBox.Show("Не удалось сопоставить индификатор строки с существующим электросчётчиком. Попробуйте обновить список электросчётчиков." + (sender as Button).GetValue(DataContextProperty).ToString());
                return;
            }
            TestimonyHistory = TestimonyHistoryService.GetTestimonyHistoryTable(electricMeterNumber);
            TableType = TableTypeEnum.TestimonyHistory;
            consumerGrid.DataContext = TestimonyHistory;
            (consumerGrid.Columns[3] as DataGridTextColumn).Binding.StringFormat = "dd.MM.yyyy HH:mm:ss";
        }

        //Открытие окна редактирования электросчётчика
        void EditTestimony(object sender, RoutedEventArgs e)
        {
            int testimonyId;

            if (!Int32.TryParse((sender as Button).GetValue(DataContextProperty).ToString(), out testimonyId) || testimonyId == 0)
            {
                MessageBox.Show("Не удалось сопоставить индификатор строки с существующим показанием." + (sender as Button).GetValue(DataContextProperty).ToString());
                return;
            }

            AddEditTestimonyWindow addEditTestimonyWindow = new AddEditTestimonyWindow()
            {
                TestimonyID = testimonyId
            };

            addEditTestimonyWindow.Owner = this;
            addEditTestimonyWindow.Title = "Редактирование показания";
            addEditTestimonyWindow.addEditTestimonyButton.Content = "Применить";

            addEditTestimonyWindow.ShowDialog();

            ElectricMetersReload();
        }

        //Удаление показания электросчётчика
        void DeleteTestimony(object sender, RoutedEventArgs e)
        {
            int testimonyId;

            if (!Int32.TryParse((sender as Button).GetValue(DataContextProperty).ToString(), out testimonyId) || testimonyId == 0)
            {
                MessageBox.Show("Не удалось сопоставить индификатор строки с существующим показанием." + (sender as Button).GetValue(DataContextProperty).ToString());
                return;
            }

            MessageBoxResult messageBoxResult = MessageBox.Show("Вы уверены что хотите удалить данное показание?", "Подтверждение удаления", MessageBoxButton.YesNo);
            if (messageBoxResult == MessageBoxResult.Yes)
                TestimonyHistoryService.DeleteTestimony(testimonyId);

            ElectricMetersReload();
        }

        //Добавление кнопки редактирования в таблицу
        void AddDataGridEditButton(DataGrid dataGrid)
        {
            //Поиск и удаление существующих в таблице кнопок редактирования 
            if (dataGrid.Columns.Any(x => x.GetValue(UidProperty).ToString() == "editButtonColumn"))
            {
                dataGrid.Columns.Remove(consumerGrid.Columns.Where(x => x.GetValue(UidProperty).ToString() == "editButtonColumn").First());
            }
            var editButtonColumn = new DataGridTemplateColumn() { };
            var editButton = new FrameworkElementFactory(typeof(Button));

            //В зависимости от текущего типа таблицы делаем привязки моделей и событий 
            if (TableType == TableTypeEnum.Consumer)
            {
                editButton.SetBinding(Button.DataContextProperty, new Binding("ID"));
                editButton.AddHandler(
                 Button.ClickEvent,
                 new RoutedEventHandler(EditConsumer));
            }
            if (TableType == TableTypeEnum.ElectricMeter)
            {
                editButton.SetBinding(Button.DataContextProperty, new Binding("Number"));
                editButton.AddHandler(
                 Button.ClickEvent,
                 new RoutedEventHandler(EditElectricMeter));
            }
            if (TableType == TableTypeEnum.TestimonyHistory)
            {
                editButton.SetBinding(Button.DataContextProperty, new Binding("ID"));
                editButton.AddHandler(
                 Button.ClickEvent,
                 new RoutedEventHandler(EditTestimony));
            }

            //Оформление кнопки
            editButton.SetValue(Button.ContentProperty, "Редактировать");
            editButton.SetValue(Button.BackgroundProperty, Brushes.AliceBlue);
            editButton.SetValue(Button.BorderBrushProperty, Brushes.AliceBlue);
            //Оформление колонки
            editButtonColumn.SetValue(UidProperty, "editButtonColumn");
            editButtonColumn.SetValue(ColumnDefinition.WidthProperty, new GridLength(1, GridUnitType.Auto));
            editButtonColumn.CellTemplate = new DataTemplate() { VisualTree = editButton };

            dataGrid.Columns.Add(editButtonColumn);
        }

        //Добавление кнопки удаления в таблицу
        void AddDataGridDeleteButton(DataGrid dataGrid)
        {
            //Поиск и удаление существующих в таблице кнопок удаления 
            if (dataGrid.Columns.Any(x => x.GetValue(UidProperty).ToString() == "deleteButtonColumn"))
            {
                dataGrid.Columns.Remove(consumerGrid.Columns.Where(x => x.GetValue(UidProperty).ToString() == "deleteButtonColumn").First());
            }
            var deleteButtonColumn = new DataGridTemplateColumn() { };
            var deleteButton = new FrameworkElementFactory(typeof(Button));

            //В зависимости от текущего типа таблицы делаем привязки моделей и событий 
            if (TableType == TableTypeEnum.Consumer)
            {
                deleteButton.SetBinding(Button.DataContextProperty, new Binding("ID"));
                deleteButton.AddHandler(
                 Button.ClickEvent,
                 new RoutedEventHandler(DeleteConsumer));
            }
            if (TableType == TableTypeEnum.ElectricMeter)
            {
                deleteButton.SetBinding(Button.DataContextProperty, new Binding("Number"));
                deleteButton.AddHandler(
                 Button.ClickEvent,
                 new RoutedEventHandler(DeleteElectricMeter));
            }
            if (TableType == TableTypeEnum.TestimonyHistory)
            {
                deleteButton.SetBinding(Button.DataContextProperty, new Binding("ID"));
                deleteButton.AddHandler(
                 Button.ClickEvent,
                 new RoutedEventHandler(DeleteTestimony));
            }

            //Оформление кнопки
            deleteButton.SetValue(Button.ContentProperty, "Удалить");
            deleteButton.SetValue(Button.BackgroundProperty, Brushes.AliceBlue);
            deleteButton.SetValue(Button.BorderBrushProperty, Brushes.AliceBlue);
            //Оформление колонки
            deleteButtonColumn.SetValue(UidProperty, "deleteButtonColumn");
            deleteButtonColumn.SetValue(ColumnDefinition.WidthProperty, new GridLength(1, GridUnitType.Auto));
            deleteButtonColumn.CellTemplate = new DataTemplate() { VisualTree = deleteButton };

            dataGrid.Columns.Add(deleteButtonColumn);
        }

        //Добавление кнопки отображения показаний счётчика (для таблицы счётчиков)
        void AddDataGridShowTestimonyHistoryButton(DataGrid dataGrid)
        {
            //Поиск и удаление существующих в таблице кнопок отображения показаний счётчика
            if (dataGrid.Columns.Any(x => x.GetValue(UidProperty).ToString() == "showTestimonyHistoryButtonColumn"))
            {
                dataGrid.Columns.Remove(consumerGrid.Columns.Where(x => x.GetValue(UidProperty).ToString() == "showTestimonyHistoryButtonColumn").First());
            }

            if (TableType != TableTypeEnum.ElectricMeter)
                return;

            var showTestimonyHistoryButtonColumn = new DataGridTemplateColumn() { };
            var showTestimonyHistoryButton = new FrameworkElementFactory(typeof(Button));

            showTestimonyHistoryButton.SetBinding(Button.DataContextProperty, new Binding("Number"));
            showTestimonyHistoryButton.AddHandler(
                Button.ClickEvent,
                new RoutedEventHandler(ShowTestimonyHistoryForElectricMeter));

            //Оформление кнопки
            showTestimonyHistoryButton.SetValue(Button.ContentProperty, "История показаний");
            showTestimonyHistoryButton.SetValue(Button.BackgroundProperty, Brushes.AliceBlue);
            showTestimonyHistoryButton.SetValue(Button.BorderBrushProperty, Brushes.AliceBlue);
            //Оформление колонки
            showTestimonyHistoryButtonColumn.SetValue(UidProperty, "showTestimonyHistoryButtonColumn");
            showTestimonyHistoryButtonColumn.SetValue(ColumnDefinition.WidthProperty, new GridLength(1, GridUnitType.Auto));
            showTestimonyHistoryButtonColumn.CellTemplate = new DataTemplate() { VisualTree = showTestimonyHistoryButton };

            dataGrid.Columns.Add(showTestimonyHistoryButtonColumn);
        }

        //Добавление колонки отображения адресов (для таблицы потребителей)
        void AddDataGridAddressColumn(DataGrid dataGrid)
        {

            if (TableType != TableTypeEnum.Consumer)
                return;

            var addressColumn = (consumerGrid.Columns[5] as DataGridTextColumn);

            //Оформление колонки
            addressColumn.SetValue(UidProperty, "addressColumn");
            addressColumn.SetValue(ColumnDefinition.WidthProperty, new GridLength(1, GridUnitType.Auto));
            //addressColumn.SetValue(Binding., "")
            //dataGrid.Columns.Add(showTestimonyHistoryButtonColumn);
        }


        #endregion



        #region Events


        //Событие загрузки окна приложения
        private void OnLoad(object sender, RoutedEventArgs e)
        {
            consumerGrid.Visibility = Visibility.Visible;
        }

        //Событие изменения размера окна
        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            consumerGrid.MaxHeight = ActualHeight - 70;
        }

        //Нажатие на кнопку отображения потребителей
        private void findConsumersButton_Click(object sender, RoutedEventArgs e)
        {
            TableType = TableTypeEnum.Consumer;

            if (!String.IsNullOrWhiteSpace(LastName))
                ConsumersDataSet = ConsumerService.GetConsumersDataSetByLastName(LastName);
            else
                ConsumersDataSet = ConsumerService.GetAllConsumersDataSet();

            consumerGrid.DataContext = Consumers;
        }

        //Событие ввода с клавиатуры в поле фильтра по фамилии
        private void searchByLastNameTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                findConsumersButton_Click(this, new RoutedEventArgs());
            }
        }

        //Событие нажатия на кнопку добавления нового потребителя
        private void addConsumerButton_Click(object sender, RoutedEventArgs e)
        {
            AddEditConsumerWindow addConsumerWindow = new AddEditConsumerWindow();
            addConsumerWindow.Owner = this;
            addConsumerWindow.ShowDialog();

            ConsumersReload();
        }

        //Событие нажатия на кнопку добавления нового показания
        private void addTestimonyButton_Click(object sender, RoutedEventArgs e)
        {
            AddEditTestimonyWindow addEditTestimonyWindow = new AddEditTestimonyWindow();
            addEditTestimonyWindow.Owner = this;
            addEditTestimonyWindow.ShowDialog();

            ElectricMetersReload();
        }

        //Событие нажатия на кнопку добавления нового электросчётчика
        private void addElectricMeterButton_Click(object sender, RoutedEventArgs e)
        {
            AddEditElectricMeterWindow addEditElectricMeterWindow = new AddEditElectricMeterWindow();
            if (addEditElectricMeterWindow.ShowDialog().Value)
                ElectricMetersReload();
        }

        //Событие генерации колонок в таблице
        private void consumerGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            AddDataGridEditButton(consumerGrid);
            AddDataGridDeleteButton(consumerGrid);
            AddDataGridShowTestimonyHistoryButton(consumerGrid);
            SetNamesForColumns();

            int allValuesCount = 0;

            if (TableType == TableTypeEnum.Consumer)
                allValuesCount = ConsumerService.GetAllConsumerCount();

            if (TableType == TableTypeEnum.ElectricMeter)
                allValuesCount = ElectricMeterService.GetAllElectricMeterCount();

            if (TableType == TableTypeEnum.TestimonyHistory)
            {
                resultCountLabel.Content = "(" + consumerGrid.Items.Count + ")";
                return;
            }

            resultCountLabel.Content = $"({consumerGrid.Items.Count}/{allValuesCount})";
        }

        //Событие нажатия на кнопку отображения электросчётчиков
        private void showElectricMetersButton_Click(object sender, RoutedEventArgs e)
        {
            ElectricMeters = ElectricMeterService.GetAllElectricMetersTable();
            TableType = TableTypeEnum.ElectricMeter;
            consumerGrid.DataContext = ElectricMeters;
            (consumerGrid.Columns[2] as DataGridTextColumn).Binding.StringFormat = "dd.MM.yyyy";
        }

        //Событие загрузки строки в таблице
        void consumerGrid_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            //Если активна таблица счётчиков, красим в красный записи с истекшим сроком госповерки
            if (TableType == TableTypeEnum.ElectricMeter)
            {
                DataRowView item = e.Row.Item as DataRowView;
                if (item != null)
                {
                    DataRow row = item.Row;

                    DateTime dateAcceptance = (DateTime)row["DateAcceptance"];
                    int stateVerificationPeriod = (int)row["StateVerificationPeriod"];

                    if (dateAcceptance.AddYears(stateVerificationPeriod) < DateTime.Now)
                        e.Row.Background = new SolidColorBrush(Colors.Red);
                }
            }
        }

        #endregion

    }
}
